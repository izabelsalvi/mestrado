library("pdftools")
library("tidyverse")
library("ggplot2")
raw_text <- map("tentativa_extrair_tab_pdf/Thesis_Revised-192-194.pdf", pdf_text)
clean_table1 <- function(raw) {
raw <- map(raw, ~ str_split(.x, "\\n") %>% unlist())
raw <- reduce(raw, c)
#specify the start and end of the table
table_start <- stringr::str_which(tolower(raw), "MTR14578*")
table_end <- stringr::str_which(tolower(raw), "58")
table_end <- table_end[min(which(table_end > table_start))]
#build the table and remove special characters
table <- raw[(table_start):(table_end)]
table <- str_replace_all(table, "\\s{2,}", "|")
text_con <- textConnection(table)
data_table <- read.csv(text_con, sep = "|")
}
results <- map_df(raw_text, clean_table1)
raw_text <- map("tentativa_extrair_tab_pdf/Thesis_Revised-192-194.pdf", pdf_text)
clean_table1 <- function(raw) {
raw <- map(raw, ~ str_split(.x, "\\n") %>% unlist())
raw <- reduce(raw, c)
#specify the start and end of the table
table_start <- stringr::str_which(tolower(raw), "MTR14578*")
table_end <- stringr::str_which(tolower(raw), "58")
table_end <- table_end[min(which(table_end > table_start))]
#build the table and remove special characters
table <- raw[(table_start):(table_end)]
table <- str_replace_all(table, "\\s{2,}", "|")
text_con <- textConnection(table)
data_table <- read.csv(text_con, sep = "|")
}
results <- map_df(raw_text, clean_table1)
rlang::last_error()
rlang::last_trace()
# download pdf and load file
url <- c("http://www.cicad.oas.org/oid/pubs/JamaicaNationalHouseholdDrugSurvey2017ENG.pdf")
raw_text <- map(url, pdf_text)
#function to scrape data and clean
clean_table1 <- function(raw) {
# Split the single pages
raw <- map(raw, ~ str_split(.x, "\\n") %>% unlist())
# Concatenate the split pages
raw <- reduce(raw, c)
# specify the start and end of the table data
table_start <- stringr::str_which(tolower(raw), "alcohol use pattern")
table_end <- stringr::str_which(tolower(raw), "never used")
table_end <- table_end[min(which(table_end > table_start))]
#Build the table  and remove special characters
table <- raw[(table_start):(table_end)]
table <- str_replace_all(table, "\\s{2,}", "|")
text_con <- textConnection(table)
data_table <- read.csv(text_con, sep = "|")
#Create a list of column names
colnames(data_table) <- c("x","Alcohol Use Pattern", "Males","Females","Total")
data_table
}
results <- map_df(raw_text, clean_table1)
results <- map_df(raw_text, clean_table1)
head(results)
# download pdf and load file
url <- c("https://drive.google.com/file/d/1w1d0LAj8tAhEChzNqXvvaGzYdIEipL4v/view?usp=share_link")
raw_text <- map(url, pdf_text)
#function to scrape data and clean
clean_table1 <- function(raw) {
# Split the single pages
raw <- map(raw, ~ str_split(.x, "\\n") %>% unlist())
# Concatenate the split pages
raw <- reduce(raw, c)
# specify the start and end of the table data
table_start <- stringr::str_which(tolower(raw), "alcohol use pattern")
table_end <- stringr::str_which(tolower(raw), "never used")
table_end <- table_end[min(which(table_end > table_start))]
#Build the table  and remove special characters
table <- raw[(table_start):(table_end)]
table <- str_replace_all(table, "\\s{2,}", "|")
text_con <- textConnection(table)
data_table <- read.csv(text_con, sep = "|")
#Create a list of column names
colnames(data_table) <- c("x","Alcohol Use Pattern", "Males","Females","Total")
data_table
}
# download pdf and load file
url <- c("https://drive.google.com/file/d/1w1d0LAj8tAhEChzNqXvvaGzYdIEipL4v/view?usp=share_link")
raw_text <- map(url, pdf_text)
# download pdf and load file
url <- c("file:///C:/Users/izabe/Downloads/Thesis_Revised-192-194-1.pdf")
raw_text <- map(url, pdf_text)
# download pdf and load file
url <- c("tentativa_extrair_tab_pdf/Thesis_Revised-192-194.pdf")
raw_text <- map(url, pdf_text)
#function to scrape data and clean
clean_table1 <- function(raw) {
# Split the single pages
raw <- map(raw, ~ str_split(.x, "\\n") %>% unlist())
# Concatenate the split pages
raw <- reduce(raw, c)
# specify the start and end of the table data
table_start <- stringr::str_which(tolower(raw), "MTR14578*")
table_end <- stringr::str_which(tolower(raw), "MRT6435")
table_end <- table_end[min(which(table_end > table_start))]
#Build the table  and remove special characters
table <- raw[(table_start):(table_end)]
table <- str_replace_all(table, "\\s{2,}", "|")
text_con <- textConnection(table)
data_table <- read.csv(text_con, sep = "|")
}
results <- map_df(raw_text, clean_table1)
## Pacotes
library(readr)
citation()
Fab_Doc_LocCoord <- read_csv("dados/brutos/do_pdf/Fab_Doc_LocCoord.csv")
Fab_Doc_LocCoord
Fab_Doc_LocCoord <- read_csv("dados/brutos/do_pdf/Fab_Doc_LocCoord.csv", delim=";")
?read_csv()
?read_csv()
Fab_Doc_LocCoord <- read_delim("dados/brutos/do_pdf/Fab_Doc_LocCoord.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
Fab_Doc_LocCoord
Fab_DocAP_GenStats <- read_delim("dados/brutos/do_pdf/Fab_DocAP_GenStats.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
Fab_DocAP_GenStats
Fab_DocAP_GenStats$`# individuals`
Fab_DocAP_GenStats$Locus  # individuos usados para sequencia de citocromo b
length(Fab_DocAP_GenStats$Locus)  # individuos usados para sequencia de citocromo b
length(unique(Fab_DocAP_GenStats$Locus)  # individuos usados para sequencia de citocromo b
length(unique(Fab_DocAP_GenStats$Locus))  # individuos usados para sequencia de citocromo b
unique(Fab_DocAP_GenStats$Locus)
length(unique(Fab_DocAP_GenStats$Locus))
#
names(Fab_DocAP_GenStats)
head(Fab_DocAP_GenStats)
Fab_DocAP_IDLoci <- read_delim("dados/brutos/do_pdf/Fab_DocAP_IDLoci.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
head(Fab_DocAP_IDLoci)
head(Fab_DocAP_GenStats)
head(Fab_DocAP_IDLoci)
Fab_DocCitBAP_IDCoordAlt <- read_delim("dados/brutos/do_pdf/Fab_DocCitBAP_IDCoordAlt.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
head(Fab_DocCitBAP_IDCoordAlt)
Fab_DocCH2_IDTot <- read_csv("dados/brutos/do_pdf/Fab_DocCH2_IDTot.csv")
Fab_DocCH2_IDTot
Fab_DocCitBAP_IDCoordAlt <- read_delim("dados/brutos/do_pdf/Fab_DocCitBAP_IDCoordAlt.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
head(Fab_DocCitBAP_IDCoordAlt)
Fab_DocCitBAP_IDCoordAlt_out <- read_delim("dados/brutos/do_pdf/Fab_DocCitBAP_IDCoordAlt_out.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
## Dados mestrado Fabricius
fabricius_folidose_cladosnovos_imput <- read_delim("dados/alterados/fabricius_folidose_cladosnovos_imput.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
fabricius_folidose_cladosnovos_imput
## Dados mestrado Fabricius
fabricius_folidose_cladosnovos_imput <- read_delim("dados/alterados/fabricius_folidose_cladosnovos_imput.csv",
delim = ",", escape_double = FALSE, trim_ws = TRUE)
View(fabricius_folidose_cladosnovos_imput)
length(Fab)
length(Fab_DocCH2_IDTot)
nrow(Fab_DocCH2_IDTot)
library(readr)
library(tidyverse)
# transforma cada linha em um vetor de caracteres
lines <- as.character(readLines("/apagar/gpc.txt", encoding = "UTF-8"))
# transforma cada linha em um vetor de caracteres
lines <- as.character(readLines("/apagar/gpc.txt", encoding = "UTF-8"))
# transforma cada linha em um vetor de caracteres
lines <- as.character(readLines("apagar/gpc.txt", encoding = "UTF-8"))
lines
dados <- read.table("apagar/gpc.txt", header = FALSE, sep = "\t", na.strings = "", stringsAsFactors = FALSE)
dados <- read.table("apagar/gpc.txt", header = FALSE, sep = "\t", na.strings = "", stringsAsFactors = FALSE, fill = TRUE)
dados
# transforma cada linha em um vetor de caracteres
lines <- as.character(readLines("apagar/gpc.txt", encoding = "UTF-8"))
# percorre todas as linhas
for (i in seq_along(lines)) {
# divide a linha pelos espaços em branco e remove os vazios
cells <- trimws(strsplit(lines[i], " ")[[1]])
# percorre todas as células da linha
for (j in seq_along(cells)) {
# se a célula contém ":", cria a sequência de números
if (grepl(":", cells[j])) {
# divide a célula pelos ":" e remove os vazios
parts <- trimws(strsplit(cells[j], ":")[[1]])
# cria a sequência de números
numbers <- seq(as.numeric(parts[1]), as.numeric(parts[2]))
# converte os números para caracteres
numbers <- as.character(numbers)
# substitui a célula original pela sequência de números
cells[j] <- paste(numbers, collapse = " ")
}
}
# une as células de volta em uma linha e imprime
cat(paste(cells, collapse = "\t"), "\n")
}
# Transformando as colunas que contêm ":" em sequências de números
for(i in 1:ncol(dados)){
if(grepl(":", dados[,i])){
valores <- unlist(strsplit(dados[,i], ":"))
sequencia <- seq(from = as.numeric(valores[1]), to = as.numeric(valores[2]))
dados[,i] <- NA
dados[,i][seq_along(sequencia)] <- sequencia
}
}
# Convertendo os dados para um vetor
dados <- unlist(tabela)
# Convertendo os dados para um vetor
dados <- unlist(dados)
dados
# Função que separa os números de acordo com a regra definida
separar_numeros <- function(dado) {
# Verifica se o dado contém o caractere ":"
if (":" %in% dado) {
# Separa os números
numeros <- as.numeric(strsplit(dado, ":")[[1]])
# Cria uma sequência de números
seq(numeros[1], numeros[2])
} else {
# Retorna o número como um vetor
as.numeric(dado)
}
}
# Aplica a função para separar os números em cada elemento do vetor
dados_separados <- lapply(dados, separar_numeros)
# Converte o resultado para uma matriz com o mesmo número de colunas da tabela original
dados_matriz <- matrix(unlist(dados_separados), ncol = ncol(tabela))
# Converte o resultado para uma matriz com o mesmo número de colunas da tabela original
dados_matriz <- matrix(unlist(dados_separados), ncol = ncol(dados))
# Exibe a matriz resultante
dados_matriz
tabela <- read.table("apagar/gpc.txt", header = FALSE, sep = "\t", na.strings = "", stringsAsFactors = FALSE, fill = TRUE)
# Convertendo os dados para um vetor
dados <- unlist(tabela)
# Função que separa os números de acordo com a regra definida
separar_numeros <- function(dado) {
# Verifica se o dado contém o caractere ":"
if (":" %in% dado) {
# Separa os números
numeros <- as.numeric(strsplit(dado, ":")[[1]])
# Cria uma sequência de números
seq(numeros[1], numeros[2])
} else {
# Retorna o número como um vetor
as.numeric(dado)
}
}
# Aplica a função para separar os números em cada elemento do vetor
dados_separados <- lapply(dados, separar_numeros)
# Converte o resultado para uma matriz com o mesmo número de colunas da tabela original
dados_matriz <- matrix(unlist(dados_separados), ncol = ncol(tabela))
# Exibe a matriz resultante
dados_matriz
View(dados_matriz)
# ler arquivo
dados <- read.table("apagar/gpc.txt", sep = "\t", fill = TRUE)
# função para criar sequência de números a partir de um intervalo representado por "x:y"
criarSequencia <- function(x) {
# se o valor não contém ":", retorna o valor original
if (!grepl(":", x)) return(as.numeric(x))
# cria sequência de números
nums <- as.numeric(unlist(strsplit(x, ":")))
seq(nums[1], nums[2])
}
# aplicar função em todas as células da tabela
dados <- apply(dados, c(1,2), criarSequencia)
# criar uma função para converter números antes de ':' e depois de ':' em sequência de números
converte_seq <- function(nums) {
# verifica se há ':' na string
if (":" %in% nums) {
# separa os números antes e depois do ':'
nums_separados <- strsplit(nums, ":", fixed = TRUE)[[1]]
# converte os números em inteiros
nums_int <- as.integer(nums_separados)
# verifica se os números foram convertidos corretamente
if (any(is.na(nums_int))) {
# caso um dos números não possa ser convertido, retorna NA
return(rep(NA, length(nums)))
} else {
# caso contrário, cria a sequência de números
return(seq(nums_int[1], nums_int[2]))
}
} else {
# se não houver ':', retorna o número original
return(as.integer(nums))
}
}
# aplica a função a cada coluna da tabela
dados_convertidos <- apply(dados, 2, converte_seq)
# remove as colunas que contêm apenas valores NA
dados_convertidos <- dados_convertidos[, !apply(is.na(dados_convertidos), 2, all)]
# cria um data frame com as colunas convertidas
dados_finais <- data.frame(dados_convertidos)
# mostra o resultado
dados_finais
View(dados_finais)
View(dados)
# ler arquivo
dados <- read.table("apagar/gpc.txt", sep = "\t", fill = TRUE)
# criar uma função para converter números antes de ':' e depois de ':' em sequência de números
converte_seq <- function(nums) {
# verifica se há ':' na string
if (":" %in% nums) {
# separa os números antes e depois do ':'
nums_separados <- strsplit(nums, ":", fixed = TRUE)[[1]]
# converte os números em inteiros
nums_int <- as.integer(nums_separados)
# verifica se os números foram convertidos corretamente
if (any(is.na(nums_int))) {
# caso um dos números não possa ser convertido, retorna NA
return(rep(NA, length(nums)))
} else {
# caso contrário, cria a sequência de números
return(seq(nums_int[1], nums_int[2]))
}
} else {
# se não houver ':', retorna o número original
return(as.integer(nums))
}
}
# aplica a função a cada coluna da tabela
dados_convertidos <- apply(dados, 2, converte_seq)
dados_convertidos
return(seq(nums_int[1], nums_int[2])
seq(nums_int[1], nums_int[2])
?%in%
":" %in%  dados
dados
?grep
grep(":", dados)
dados
grep(":", dados, value = TRUE)
grepl(":", dados, value = TRUE)
grepl(":", dados)
grepl(":", dados[1])
grepl(":", dados[,1])
grepl(":", dados[,1]) == TRUE
if (grepl(":", dados[,1]) == TRUE){
nums_separados <- strsplit(dados[,1], ":", fixed = TRUE)[[1]]
}
if (grepl(":", dados[,1])){
nums_separados <- strsplit(dados[,1], ":", fixed = TRUE)[[1]]
}
":" %in% nums
grepl(":", dados[,1])
tombo_col <- read_delim("dados/alterados/tombo_colecao.csv",
delim = ",",
escape_double = FALSE,
col_names = FALSE,
fill = TRUE)
tombo_col <- read_delim("dados/alterados/tombo_colecao.csv",
delim = ",",
escape_double = FALSE,
col_names = FALSE,
fill = TRUE)
tombo_col <- read_delim("dados/alterados/tombo_colecao.csv",
delim = ",",
escape_double = FALSE,
col_names = FALSE)
tombo_col <- read_delim("dados/brutos/tombo_colecao.csv",
delim = ",",
escape_double = FALSE,
col_names = FALSE)
tombo_col <- read_delim("dados/brutos/tombo_colecao.csv",
delim = ";",
escape_double = FALSE,
col_names = FALSE)
source("~/mestrado_unb/lacv/analises_mestrado/scripts/04_compilacao_dados_fabwe.R", echo=TRUE)
tombo_col
View(tombo_col)
pivot_longer(tombo_col, -1)
long_tombo_col <- pivot_longer(tombo_col, -1)
long_tombo_col
View(long_tombo_col)
long_tombo_col[,c(1,3)]
long_tombo_col[,c(1,3)] %>%
filter(value, NA)
long_tombo_col[,c(1,3)] %>%
filter(value, !NA)
?filter
long_tombo_col[,c(1,3)] %>%
filter(long_tombo_col, value == !NA)
long_tombo_col[,c(1,3)] %>%
filter(long_tombo_col, value[] == !NA)
long_tombo_col %>%
filter(long_tombo_col, value[] == !NA)
long_tombo_col %>%
filter(is.na(value))
long_tombo_col %>%
filter(!is.na(value))
long_tombo_col <- long_tombo_col %>%
filter(!is.na(value))
View(long_tombo_col)
long_tombo_col_sna <- long_tombo_col %>%
filter(!is.na(value))
View(long_tombo_col_sna)
long_tombo_col_sna <- long_tombo_col_sna[,c(1,3)]
long_tombo_col_sna
colnames(long_tombo_col_sna) <- c("Colecao", "Tombo")
long_tombo_col_sna
nrow(Fab_DocCH2_IDTot)
left_join(fabricius_folidose_cladosnovos_imput, long_tombo_col_sna)
FabMestComp <- left_join(fabricius_folidose_cladosnovos_imput, long_tombo_col_sna)
FabMestComp
## Pacotes
library(readr)
library(tidyverse)
Fab_DocCH2_IDTot <- read_delim("dados/brutos/do_pdf/Fab_DocCH2_IDTot.csv",
delim = ";")
Fab_DocCH2_IDTot
View(Fab_DocCH2_IDTot)
?gsub
?gsub
?gsub
?gsub
